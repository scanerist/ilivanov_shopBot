from aiogram import types, Bot, Dispatcher, fsm
from aiogram.filters import Command, Text
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import requests

import xml.etree.ElementTree as ET
import logging

from config import Config, load_config

command_dict = {"clothes": False,
                "shoes": False}


class FSMfill(StatesGroup):
    fill_shoes_price = State()
    fill_accesories_price = State()


kb = [[KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—É–≤—åüíµ')],
      [KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–¥–µ–∂–¥—Éüí¥')],
      [KeyboardButton(text='–ü–æ–º–æ—â—å‚ùì')],
      [KeyboardButton(text='–û—Ç–∑—ã–≤—ã‚úâÔ∏è')], ]
config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token
print(BOT_TOKEN)
logging.basicConfig(level=logging.INFO)

bot: Bot = Bot(token=BOT_TOKEN)
dp: Dispatcher = Dispatcher()


def cny_to_rub_converter(value: int) -> float:
    cny_rate = float(
        ET.fromstring(requests.get('https://www.cbr.ru/scripts/XML_daily.asp').text)
        .find("./Valute[CharCode='CNY']/Value")
        .text.replace(",", ".")) + 1
    return cny_rate * value


@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, @{message.from_user.full_name} \n'
                         f'<b>ilivanovshopbot</b> –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞', reply_markup=keyboard,
                         parse_mode='HTML')


@dp.message(Text(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—É–≤—åüíµ"))
async def send_shoe_command(message: Message):
    command_dict["shoes"] = True
    await message.answer(f"–í–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ , –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: <b>{round(cny_to_rub_converter(1), 2)}</b>",
                         parse_mode='HTML')


@dp.message(Text(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–¥–µ–∂–¥—Éüí¥"))
async def send_accesories_command(message: Message):
    command_dict["clothes"] = True
    await message.answer(f"–í–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: <b>{round(cny_to_rub_converter(1), 2)}</b>",
                         parse_mode='HTML')


@dp.message(Text(text='–ü–æ–º–æ—â—å‚ùì'))
async def process_help_command(message: Message):
    await message.answer(f'<b>ilivanovshopbot</b> –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞',
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb), parse_mode='HTML')


@dp.message(Text(text='–û—Ç–∑—ã–≤—ã‚úâÔ∏è'))
async def process_help_command(message: Message):
    await message.answer(f'–æ—Ç–∑—ã–≤—ã: https://vk.com/wall303473975_327',
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb, ))


@dp.message()
async def answer_convert(message: types.Message):
    user_mes = int(message.text)
    conversion_output: float = round(cny_to_rub_converter(user_mes), 2)
    if command_dict["clothes"]:
        await message.answer(
            f"–°—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{round(conversion_output + conversion_output * 0.15 + 700, 4)} RUB</b>\n\n"
            f"‚ùóÔ∏è<b>–≠–¢–ê –°–£–ú–ú–ê –° –£–ß–ï–¢–û–ú –î–û–°–¢–ê–í–ö–ò –ò –ö–û–ú–ò–°–°–ò–ò</b>‚ùóÔ∏è",
            reply_markup=ReplyKeyboardMarkup(keyboard=kb), parse_mode='HTML')
        command_dict["clothes"] = False
    if command_dict["shoes"]:
        await message.answer(
            f"–°—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{round(conversion_output + conversion_output * 0.15 + 1200, 4)} RUB</b>\n\n"
            f"‚ùóÔ∏è<b>–≠–¢–ê –°–£–ú–ú–ê –° –£–ß–ï–¢–û–ú –î–û–°–¢–ê–í–ö–ò –ò –ö–û–ú–ò–°–°–ò–ò</b>‚ùóÔ∏è", parse_mode='HTML')
        command_dict["shoes"] = False


if __name__ == '__main__':
    dp.run_polling(bot)
